.data     # directive defines data section
reg_values:     # label
    .word 1, -2, 3, -4, 5, -6, 7, -8, 9, -10    # in memory 10 32-bit words
    .word 11, -12, 13, -14, 15, -16, 17, -18, 19, -20    # in memory 10 32-bit words
    .word 21, -22, 23, -24, 25, -26, 27, -28, 29, -30    # in memory 10 32-bit words
bad:     # label
    .asciiz "x"    # emit string
ok:     # label
    .word 0xC001    # in memory 1 32-bit word
ref_value:     # label
    .word 0, 1 # this will be correct values for our conditions: if value of init_iregs is positive, it'll written in signâ€“magnitude system and it'll be less than value in immediate => reg. goes 1; and if value in register is negative, it'll be written in twos-complement system and it'll be greater, because immediate has 16-bit representation, and the register is 32-bit => reg. goes 0
save_value_from_x2:     # label
    .word 0    # in memory 1 32-bit word

.text
main:
    la x1, reg_values     # put the address of data label "reg_values" into reg. x1 >> x1 = 0x10000000 (268435456)

    lw x2, 0(x1)     # put value into reg. from memory with the address (x1+n), where n is offset >> x2 = 0x00000001 (1)
    lw x3, 4(x1)     # ^p >> x3 = 0xfffffffe (-2)
    lw x4, 8(x1)     # ^p >> x4 = 0x00000003 (3)
    lw x5, 12(x1)     # ^p >> x5 = 0xfffffffc (-4)
    lw x6, 16(x1)     # ^p >> x6 = 0x00000005 (5)
    lw x7, 20(x1)     # ^p >> x7 = 0xfffffffa (-6)
    lw x8, 24(x1)     # ^p >> x8 = 0x00000007 (7)
    lw x9, 28(x1)     # ^p >> x9 = 0xfffffff8 (-8)
    lw x10, 32(x1)     # ^p >> x10 = 0x00000009 (9)
    lw x11, 36(x1)     # ^p >> x11 = 0xfffffff6 (-10)
    lw x12, 40(x1)     # ^p >> x12 = 0x0000000b (11)
    lw x13, 44(x1)     # ^p >> x13 = 0xfffffff4 (-12)
    lw x14, 48(x1)     # ^p >> x14 = 0x0000000d (13)
    lw x15, 52(x1)     # ^p >> x15 = 0xfffffff2 (-14)
    lw x16, 56(x1)     # ^p >> x16 = 0x0000000f (15)
    lw x17, 60(x1)     # ^p >> x17 = 0xfffffff0 (-16)
    lw x18, 64(x1)     # ^p >> x18 = 0x00000011 (17)
    lw x19, 68(x1)     # ^p >> x19 = 0xffffffee (-18)
    lw x20, 72(x1)     # ^p >> x20 = 0x00000013 (19)
    lw x21, 76(x1)     # ^p >> x21 = 0xffffffec (-20)
    lw x22, 80(x1)     # ^p >> x22 = 0x00000015 (21)
    lw x23, 84(x1)     # ^p >> x23 = 0xffffffea (-22)
    lw x24, 88(x1)     # ^p >> x24 = 0x00000017 (23)
    lw x25, 92(x1)     # ^p >> x25 = 0xffffffe8 (-24)
    lw x26, 96(x1)     # ^p >> x26 = 0x00000019 (15)
    lw x27, 100(x1)     # ^p >> x27 = 0xffffffe6 (-26)
    lw x28, 104(x1)     # ^p >> x28 = 0x0000001b (27)
    lw x29, 108(x1)     # ^p >> x29 = 0xffffffe4 (-28)
    lw x30, 112(x1)     # ^p >> x30 = 0x0000001d (29)
    lw x31, 116(x1)     # ^p >> x31 = 0xffffffe2 (-30)

    la x1, save_value_from_x2     # put the address of save_value_from_x2 into reg. x1 >> x1 = 0x10000086 (268435590)
    sw x2, 0(x1)     # we need to save current value of reg. x2 because we'll use this reg. further >> in memory with the address 0x10000086

    sltiu x2, x2, 0x7FE     # check if value in reg. is less than immediate with replacing of value in reg. >> reg.0x00000001 (1) < imm.0x7FE - true, x2 = 0x00000001 (1)
    sltiu x3, x3, 0x7FD     # ^p >> reg.0xfffffffe < imm.0x7FD - false, x3 = 0x00000000 (0)
    sltiu x4, x4, 0x7FB     # ^p >> reg.0x00000003 < imm.0x7FB - true, x4 = 0x00000001 (1)
    sltiu x5, x5, 0x7F7     # ^p >> reg.0xfffffffc < imm.0x7F7 - false, x5 = 0x00000000 (0)
    sltiu x6, x6, 0x7FE     # ^p >> reg.0x00000005 < imm.0x7FE - true, x6 = 0x00000001 (1)
    sltiu x7, x7, 0x7FD     # ^p >> reg.0xfffffffa < imm.0x7FD - false, x7 = 0x00000000 (0)
    sltiu x8, x8, 0x7FB     # ^p >> reg.0x00000007 < imm.0x7FB - true, x8 = 0x00000001 (1)
    sltiu x9, x9, 0x7F7     # ^p >> reg.0xfffffff8 < imm.0x7F7 - false, x9 = 0x00000000 (0)
    sltiu x10, x10, 0x7FE     # ^p >> reg.0x00000009 < imm.0x7FE - true, x10 = 0x00000001 (1)
    sltiu x11, x11, 0x7FD     # ^p >> reg.0xfffffff6 < imm.0x7FD - false, x11 = 0x00000000 (0)
    sltiu x12, x12, 0x7FB     # ^p >> reg.0x0000000b < imm.0x7FB - true, x12 = 0x00000001 (1)
    sltiu x13, x13, 0x7F7     # ^p >> reg.0xfffffff4 < imm.0x7F7 - false, x13 = 0x00000000 (0)
    sltiu x14, x14, 0x7FE     # ^p >> reg.0x0000000d < imm.0x7FE - true, x14 = 0x00000001 (1)
    sltiu x15, x15, 0x7FD     # ^p >> reg.0xfffffff2 < imm.0x7FD - false, x15 = 0x00000000 (0)
    sltiu x16, x16, 0x7FB     # ^p >> reg.0x0000000f < imm.0x7FB - true, x16 = 0x00000001 (1)
    sltiu x17, x17, 0x7F7     # ^p >> reg.0xfffffff0 < imm.0x7F7 - false, x17 = 0x00000000 (0)
    sltiu x18, x18, 0x7FE     # ^p >> reg.0x00000011 < imm.0x7FE - true, x18 = 0x00000001 (1)
    sltiu x19, x19, 0x7FD     # ^p >> reg.0xffffffee < imm.0x7FD - false, x19 = 0x00000000 (0)
    sltiu x20, x20, 0x7FB     # ^p >> reg.0x00000013 < imm.0x7FB - true, x20 = 0x00000001 (1)
    sltiu x21, x21, 0x7F7     # ^p >> reg.0xffffffec < imm.0x7F7 - false, x21 = 0x00000000 (0)
    sltiu x22, x22, 0x7FE     # ^p >> reg.0x00000015 < imm.0x7FE - true, x22 = 0x00000001 (1)
    sltiu x23, x23, 0x7FD     # ^p >> reg.0xffffffea < imm.0x7FD - false, x23 = 0x00000000 (0)
    sltiu x24, x24, 0x7FB     # ^p >> reg.0x00000017 < imm.0x7FB - true, x24 = 0x00000001 (1)
    sltiu x25, x25, 0x7F7     # ^p >> reg.0xffffffe8 < imm.0x7F7 - false, x25 = 0x00000000 (0)
    sltiu x26, x26, 0x7FE     # ^p >> reg.0x00000019 < imm.0x7FE - true, x26 = 0x00000001 (1)
    sltiu x27, x27, 0x7FD     # ^p >> reg.0xffffffe6 < imm.0x7FD - false, x27 = 0x00000000 (0)
    sltiu x28, x28, 0x7FB     # ^p >> reg.0x0000001b < imm.0x7FB - true, x28 = 0x00000001 (1)
    sltiu x29, x29, 0x7F7     # ^p >> reg.0xffffffe4 < imm.0x7F7 - false, x29 = 0x00000000 (0)
    sltiu x30, x30, 0x7FE     # ^p >> reg.0x0000001d < imm.0x7FE - true, x30 = 0x00000001 (1)
    sltiu x31, x31, 0x7FD     # ^p >> reg.0xffffffe2 < imm.0x7FD - false, x31 = 0x00000000 (0)

    la x1, ref_value     # put the address of data label "ref_value" into reg. x1 >> x1 = 0x1000007e (268435582)
    lw x2, 0(x1)     # put value ref_value(x1+0) = 0 into reg. x2 >> x2 = 0x00000000
    bne x3, x2, if_fail     # if x[i] != x2, branch to label if_fail >> x2.0x00000000 = x3.0x00000000, continue whithout jump
    lw x2, 4(x1)     # put value ref_value(x1+4) = 1 into reg. x2 >> x2 = 0x00000001
    bne x4, x2, if_fail     # ^p >> x2.0x00000001= x4.0x00000001, continue whithout jump
    lw x2, 0(x1)     # ^p >> x2 = 0x00000000
    bne x5, x2, if_fail     # ^p >> x2.0x00000000 = x5.0x00000000, continue whithout jump
    lw x2, 4(x1)     # ^p >> x2 = 0x00000001
    bne x6, x2, if_fail     # ^p >> x2.0x00000001 = x6.0x00000001, continue whithout jump
    lw x2, 0(x1)     # ^p >> x2 = 0x00000000
    bne x7, x2, if_fail     # ^p >> x2.0x00000000 = x7.0x00000000, continue whithout jump
    lw x2, 4(x1)     # ^p >> x2 = 0x00000001
    bne x8, x2, if_fail     # ^p >> x2.0x00000001 = x8.0x00000001, continue whithout jump
    lw x2, 0(x1)     # ^p >> x2 = 0x00000000
    bne x9, x2, if_fail     # ^p >> x2.0x00000000 = x9.0x00000000, continue whithout jump
    lw x2, 4(x1)     # ^p >> x2 = 0x00000001
    bne x10, x2, if_fail     # ^p >> x2.0x00000001 = x10.0x00000001, continue whithout jump
    lw x2, 0(x1)     # ^p >> x2 = 0x00000000
    bne x11, x2, if_fail     # ^p >> x2.0x00000000 = x11.0x00000000, continue whithout jump
    lw x2, 4(x1)     # ^p >> x2 = 0x00000001
    bne x12, x2, if_fail     # ^p >> x2.0x00000001 = x12.0x00000001, continue whithout jump
    lw x2, 0(x1)     # ^p >> x2 = 0x00000000
    bne x13, x2, if_fail     # ^p >> x2.0x00000000 = x13.0x00000000, continue whithout jump
    lw x2, 4(x1)     # ^p >> x2 = 0x00000001
    bne x14, x2, if_fail     # ^p >> x2.0x00000001 = x14.0x00000001, continue whithout jump
    lw x2, 0(x1)     # ^p >> x2 = 0x00000000
    bne x15, x2, if_fail     # ^p >> x2.0x00000000 = x15.0x00000000, continue whithout jump
    lw x2, 4(x1)     # ^p >> x2 = 0x00000001
    bne x16, x2, if_fail     # ^p >> x2.0x00000001 = x16.0x00000001, continue whithout jump
    lw x2, 0(x1)     # ^p >> x2 = 0x00000000
    bne x17, x2, if_fail     # ^p >> x2.0x00000000 = x17.0x00000000, continue whithout jump
    lw x2, 4(x1)     # ^p >> x2 = 0x00000001
    bne x18, x2, if_fail     # ^p >> x2.0x00000001 = x18.0x00000001, continue whithout jump
    lw x2, 0(x1)     # ^p >> x2 = 0x00000000
    bne x19, x2, if_fail     # ^p >> x2.0x00000000 = x19.0x00000000, continue whithout jump
    lw x2, 4(x1)     # ^p >> x2 = 0x00000001
    bne x20, x2, if_fail     # ^p >> x2.0x00000001 = x20.0x00000001, continue whithout jump
    lw x2, 0(x1)     # ^p >> x2 = 0x00000000
    bne x21, x2, if_fail     # ^p >> x2.0x00000000 = x21.0x00000000, continue whithout jump
    lw x2, 4(x1)     # ^p >> x2 = 0x00000001
    bne x22, x2, if_fail     # ^p >> x2.0x00000001 = x22.0x00000001, continue whithout jump
    lw x2, 0(x1)     # ^p >> x2 = 0x00000000
    bne x23, x2, if_fail     # ^p >> x2.0x00000000 = x23.0x00000000, continue whithout jump
    lw x2, 4(x1)     # ^p >> x2 = 0x00000001
    bne x24, x2, if_fail     # ^p >> x2.0x00000001 = x24.0x00000001, continue whithout jump
    lw x2, 0(x1)     # ^p >> x2 = 0x00000000
    bne x25, x2, if_fail     # ^p >> x2.0x00000000 = x25.0x00000000, continue whithout jump
    lw x2, 4(x1)     # ^p >> x2 = 0x00000001
    bne x26, x2, if_fail     # ^p >> x2.0x00000001 = x26.0x00000001, continue whithout jump
    lw x2, 0(x1)     # ^p >> x2 = 0x00000000
    bne x27, x2, if_fail     # ^p >> x2.0x00000000 = x27.0x00000000, continue whithout jump
    lw x2, 4(x1)     # ^p >> x2 = 0x00000001
    bne x28, x2, if_fail     # ^p >> x2.0x00000001 = x28.0x00000001, continue whithout jump
    lw x2, 0(x1)     # ^p >> x2 = 0x00000000
    bne x29, x2, if_fail     # ^p >> x2.0x00000000 = x29.0x00000000, continue whithout jump
    lw x2, 4(x1)     # ^p >> x2 = 0x00000001
    bne x30, x2, if_fail     # ^p >> x2.0x00000001 = x30.0x00000001, continue whithout jump
    lw x2, 0(x1)     # ^p >> x2 = 0x00000000
    bne x31, x2, if_fail     # ^p >> x2.0x00000000 = x31.0x00000000, continue whithout jump

    la x1, save_value_from_x2     # we need to return value of reg. x2 to check itself; put the address of save_value_from_x2 into reg. x1 >> x1 = 0x10000086 (268435590)
    lw x2, 0(x1)     # put value ref_value(x1+0) = 0 into reg. x2 >> x2 = 0x00000001 (1)
    la x1, ref_value     # put the address of data label "ref_value" into reg. x1 >> x1 = 0x1000007e (268435582)
    lw x3, 4(x1)     # put value ref_value(x1+4) = 1 into reg. x3 >> x3 = 0x00000001 (1)
    bne x3, x2, if_fail     # ^p >> x2.0x000000001 = x3.0x000000001, continue whithout jump

if_ok:   
    lw x1,ok     # put value of variable "ok" to reg. x1 >> x1 = 0x0000c001 (49153)
    addi x10, x0, 1     # write number of type of syscall to a0 (=x10) >> number of syscall 1, x10 = 0x00000001
    add   x11, x0, x1     # put our value from x1 to x11 to print it in console >> x11 = 0x0000c001 (49153)
    ecall     # execute call of syscall "print_int" >> in console output will be printed word 49153
    j exit     # unconditional jump to "exit:" label
# this code in label "if_fail" will not be executed
if_fail:
    lw x1,bad     # put value of variable "bad" to reg. x1
    addi x10, x0, 11     # write number of type of syscall to a0 (=x10)
    add x11, x0, x1     # put the address of reg. x1 with our value
    ecall     # execute call of syscall "print_char"

exit:
    addi  x10, x0, 10     # write number of type of syscall to a0 (=x10) >> write number of type of syscall to a0 (=x10) >> number of syscall 10 (exit), x10 = 0x0000000a (10)
    ecall     # execute call of syscall "exit"
